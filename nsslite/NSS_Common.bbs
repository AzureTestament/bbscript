BeginSubroutine: s64'CmnMatchInit'
  BeginStateDefine: s64'Stand'
    SetEntryState: (Standing)
    MakeInput: 
    AddInputCondition: 
    SetStateType: (Standing)
    EndStateDefine: 
  BeginStateDefine: s64'StandFlip'
    SetEntryState: (Standing)
    SetStateType: (Standing)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'BackWalk'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputLenience: 6
    MakeInputMethod: (Strict)
    AddInputCondition: 
    SetStateType: (BackwardWalk)
    EndStateDefine: 
  BeginStateDefine: s64'BackDash'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputLenience: 6
    MakeInputMethod: (Strict)
    AddInputCondition: 
    AddInputConditionList: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputLeft)
    AddInputCondition: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputDash)
    MakeInputMethod: (Once)
    AddInputCondition: 
    SetStateType: (BackwardDash)
    EndStateDefine: 
  BeginStateDefine: s64'ForwardWalk'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputRight)
    MakeInputMethod: (Strict)
    AddInputCondition: 
    SetStateType: (ForwardWalk)
    EndStateDefine: 
  BeginStateDefine: s64'ForwardDash'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputRight)
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputRight)
    MakeInputMethod: (Strict)
    AddInputCondition: 
    AddInputConditionList: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputRight)
    AddInputCondition: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputDash)
    MakeInputMethod: (Once)
    AddInputCondition: 
    SetStateType: (ForwardDash)
    EndStateDefine: 
  BeginStateDefine: s64'ForwardDashStop'
    SetEntryState: (Standing)
    SetStateType: (Standing)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'Stand2Crouch'
    SetEntryState: (Crouching)
    MakeInput: 
    MakeInputSequenceBitmask: (InputDown)
    MakeInputMethod: (Once)
    AddInputCondition: 
    SetStateType: (Crouching)
    EndStateDefine: 
  BeginStateDefine: s64'Crouch'
    SetEntryState: (Crouching)
    SetStateType: (Crouching)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'CrouchFlip'
    SetEntryState: (Crouching)
    SetStateType: (Crouching)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'Crouch2Stand'
    SetEntryState: (Standing)
    SetStateType: (Standing)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'VJump'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputUp)
    MakeInputLenience: 4
    MakeInputMethod: (Strict)
    AddInputCondition: 
    SetStateType: (NeutralJump)
    EndStateDefine: 
  BeginStateDefine: s64'BJump'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputUpLeft)
    MakeInputLenience: 4
    MakeInputMethod: (Strict)
    AddInputCondition: 
    SetStateType: (BackwardJump)
    EndStateDefine: 
  BeginStateDefine: s64'FJump'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputUpRight)
    MakeInputLenience: 4
    MakeInputMethod: (Strict)
    AddInputCondition: 
    SetStateType: (ForwardJump)
    EndStateDefine: 
  BeginStateDefine: s64'VSuperJump'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputDown)
    MakeInputSequenceBitmask: (InputUp)
    MakeInputMethod: (Normal)
    AddInputCondition: 
    SetStateType: (NeutralJump)
    EndStateDefine: 
  BeginStateDefine: s64'BSuperJump'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputDown)
    MakeInputSequenceBitmask: (InputUpLeft)
    MakeInputMethod: (Normal)
    AddInputCondition: 
    SetStateType: (BackwardJump)
    EndStateDefine: 
  BeginStateDefine: s64'FSuperJump'
    SetEntryState: (Standing)
    MakeInput: 
    MakeInputSequenceBitmask: (InputDown)
    MakeInputSequenceBitmask: (InputUpRight)
    MakeInputMethod: (Normal)
    AddInputCondition: 
    SetStateType: (ForwardJump)
    EndStateDefine: 
  BeginStateDefine: s64'BackAirDash'
    SetEntryState: (Jumping)
    MakeInput: 
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputLenience: 6
    MakeInputMethod: (Strict)
    AddInputCondition: 
    AddInputConditionList: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputUpLeft)
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputLenience: 6
    MakeInputMethod: (Strict)
    AddInputCondition: 
    AddInputConditionList: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputLeft)
    AddInputCondition: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputDash)
    MakeInputMethod: (Once)
    AddInputCondition: 
    AddStateCondition: (AirDashOk)
    AddStateCondition: (AirDashMinimumHeight)
    SetStateType: (BackwardAirDash)
    EndStateDefine: 
  BeginStateDefine: s64'ForwardAirDash'
    SetEntryState: (Jumping)
    MakeInput: 
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputRight)
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputRight)
    MakeInputLenience: 6
    MakeInputMethod: (Strict)
    AddInputCondition: 
    AddInputConditionList: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputUpRight)
    MakeInputSequenceBitmask: (InputNeutral)
    MakeInputSequenceBitmask: (InputRight)
    MakeInputLenience: 6
    MakeInputMethod: (Strict)
    AddInputCondition: 
    AddInputConditionList: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputRight)
    AddInputCondition: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputDash)
    MakeInputMethod: (Once)
    AddInputCondition: 
    AddStateCondition: (AirDashOk)
    AddStateCondition: (AirDashMinimumHeight)
    SetStateType: (ForwardAirDash)
    EndStateDefine: 
  BeginStateDefine: s64'JumpFlip'
    SetEntryState: (Jumping)
    SetStateType: (NeutralJump)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'JumpLanding'
    SetEntryState: (Standing)
    SetStateType: (Standing)
    IsFollowupMove: 1
    EndStateDefine: 
  BeginStateDefine: s64'VAirJump'
    SetEntryState: (Jumping)
    MakeInput: 
    MakeInputSequenceBitmask: (InputUp)
    MakeInputMethod: (OnceStrict)
    AddInputCondition: 
    AddStateCondition: (AirJumpOk)
    AddStateCondition: (AirJumpMinimumHeight)
    SetStateType: (NeutralJump)
    EndStateDefine: 
  BeginStateDefine: s64'BAirJump'
    SetEntryState: (Jumping)
    MakeInput: 
    MakeInputSequenceBitmask: (InputUpLeft)
    MakeInputMethod: (OnceStrict)
    AddInputCondition: 
    AddStateCondition: (AirJumpOk)
    AddStateCondition: (AirJumpMinimumHeight)
    SetStateType: (BackwardJump)
    EndStateDefine: 
  BeginStateDefine: s64'FAirJump'
    SetEntryState: (Jumping)
    MakeInput: 
    MakeInputSequenceBitmask: (InputUpRight)
    MakeInputMethod: (OnceStrict)
    AddInputCondition: 
    AddStateCondition: (AirJumpOk)
    AddStateCondition: (AirJumpMinimumHeight)
    SetStateType: (ForwardJump)
    EndStateDefine: 
  BeginStateDefine: s64'NormalAttack'
    SetEntryState: (None)
    SetStateType: (NormalAttack)
    EndStateDefine: 
  BeginStateDefine: s64'Hitstun'
    SetEntryState: (None)
    SetStateType: (Hitstun)
    IsFollowupMove: 1
    EndStateDefine: 
  EndSubroutine: 

BeginSubroutine: s64'CmnDisableGroundMovement'
  DisableState: (Standing)
  DisableState: (Crouching)
  DisableState: (ForwardWalk)
  DisableState: (BackwardWalk)
  DisableState: (ForwardDash)
  DisableState: (BackwardDash)
  DisableState: (Tech)
  EndSubroutine: 

BeginSubroutine: s64'CmnEnableAttacks'
  EnableState: (NormalAttack)
  EnableState: (SpecialAttack)
  EnableState: (SuperAttack)
  EndSubroutine: 

BeginSubroutine: s64'CmnAtkLevel0'
  SetAttackLevel: 0
  SetHitstun: 12
  SetBlockstun: 9
  SetHitstop: 11
  SetHitPushbackX: Val(10000)
  If: Mem(IsLand)
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(30000)
    SetHitGravity: Val(3000)
    EndIf:
  Else: 
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(10000)
    SetHitGravity: Val(3500)
    EndElse:
  SetGroundHitAction: (GroundNormal)
  SetAirHitAction: (AirNormal)
  SetForcedProration: 90
  EndSubroutine: 

BeginSubroutine: s64'CmnAtkLevel1'
  SetAttackLevel: 1
  SetHitstun: 14
  SetBlockstun: 11
  SetHitstop: 12
  SetCounterHitstop: 14
  If: Mem(IsLand)
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(30000)
    SetHitGravity: Val(3000)
    EndIf:
  Else: 
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(10000)
    SetHitGravity: Val(3500)
    EndElse:
  SetGroundHitAction: (GroundNormal)
  SetAirHitAction: (AirNormal)
  SetForcedProration: 90
  EndSubroutine: 

BeginSubroutine: s64'CmnAtkLevel2'
  SetAttackLevel: 2
  SetHitstun: 16
  SetBlockstun: 13
  SetHitstop: 13
  SetCounterHitstop: 17
  If: Mem(IsLand)
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(30000)
    SetHitGravity: Val(3000)
    EndIf:
  Else: 
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(10000)
    SetHitGravity: Val(3500)
    EndElse:
  SetGroundHitAction: (GroundNormal)
  SetAirHitAction: (AirNormal)
  SetForcedProration: 90
  EndSubroutine: 

BeginSubroutine: s64'CmnAtkLevel3'
  SetAttackLevel: 3
  SetHitstun: 19
  SetBlockstun: 16
  SetHitstop: 14
  SetCounterHitstop: 22
  If: Mem(IsLand)
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(30000)
    SetHitGravity: Val(3000)
    EndIf:
  Else: 
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(10000)
    SetHitGravity: Val(3500)
    EndElse:
  SetGroundHitAction: (GroundNormal)
  SetAirHitAction: (AirNormal)
  SetForcedProration: 90
  EndSubroutine: 

BeginSubroutine: s64'CmnAtkLevel4'
  SetAttackLevel: 4
  SetHitstun: 21
  SetBlockstun: 18
  SetHitstop: 15
  SetCounterHitstop: 27
  If: Mem(IsLand)
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(30000)
    SetHitGravity: Val(3000)
    EndIf:
  Else: 
    SetAirHitPushbackX: Val(21500)
    SetAirHitPushbackY: Val(10000)
    SetHitGravity: Val(3500)
    EndElse:
  SetGroundHitAction: (GroundNormal)
  SetAirHitAction: (AirNormal)
  SetForcedProration: 90
  EndSubroutine: 

BeginSubroutine: s64'CmnAnyCancelStand'
  SetAttacking: 0
  ForceEnableFarNormal: 0
  EnableAll: 
  EnableCancelIntoSelf: 1
  DisableState: (Standing)
  EndSubroutine: 

BeginState: s64'Stand'
  OnEnter: 
    SetSpeedX: Val(0)
    EnableAll: 
    EnableFlip: 1
    EnableState: (Crouching)
    EndBlock: 
  EndState: 

BeginState: s64'StandFlip'
  OnEnter: 
    SetSpeedX: Val(0)
    EnableAll: 
    EnableFlip: 1
    EnableState: (Crouching)
    EndBlock: 
  EndState: 

BeginState: s64'BackWalk'
  OnEnter: 
    GetPlayerStats: (BWalkSpeed)
    SetSpeedX: Mem(StoredRegister)
    EnableState: (Block)
    EndBlock: 
  OnUpdate: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputLeft)
    MakeInputLenience: 1
    MakeInputAllowDisable: 0
    MakeInputMethod: (Strict)
    CheckInput: 
    IfNot: Mem(StoredRegister)
      MakeInput: 
      MakeInputSequenceBitmask: (InputDown)
      MakeInputLenience: 1
      MakeInputAllowDisable: 0
      CheckInput: 
      If: Mem(StoredRegister)
        JumpToState: s64'Stand2Crouch'
        EndIf: 
      Else: 
        JumpToState: s64'Stand'
        EndElse: 
      EndIf: 
    EndBlock: 
  OnExit: 
    DisableState: (Block)
    IfNot: Mem(IsStunned)
      HaltMomentum: 
      EnableState: (Standing)
      DisableState: (Crouching)
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'BackDash'
  OnEnter: 
    DisableAll: 
    ClearInertia: 
    GetPlayerStats: (BDashHeight)
    SetSpeedY: Mem(StoredRegister)
    GetPlayerStats: (BDashSpeed)
    SetSpeedX: Mem(StoredRegister)
    GetPlayerStats: (BDashGravity)
    SetGravity: Mem(StoredRegister)
    EnableFlip: 0
    EndBlock: 
  OnExit: 
    EnableFlip: 1
    EndBlock: 
  EndState: 

BeginState: s64'ForwardWalk'
  OnEnter: 
    GetPlayerStats: (FWalkSpeed)
    SetSpeedX: Mem(StoredRegister)
    EndBlock: 
  OnUpdate: 
    MakeInput: 
    MakeInputSequenceBitmask: (InputRight)
    MakeInputLenience: 1
    MakeInputAllowDisable: 0
    MakeInputMethod: (Strict)
    CheckInput: 
    IfNot: Mem(StoredRegister)
      MakeInput: 
      MakeInputSequenceBitmask: (InputDown)
      MakeInputLenience: 1
      MakeInputAllowDisable: 0
      CheckInput: 
      If: Mem(StoredRegister)
        JumpToState: s64'Stand2Crouch'
        EndIf: 
      Else: 
        JumpToState: s64'Stand'
        EndElse: 
      EndIf: 
    EndBlock: 
  OnExit: 
    IfNot: Mem(IsStunned)
      HaltMomentum: 
      EnableState: (Standing)
      DisableState: (Crouching)
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'ForwardDash'
  OnEnter: 
    CallSubroutine: s64'CmnEnableAttacks'
    CallSubroutine: s64'CmnDisableGroundMovement'
    If: Mem(DefaultCommonAction)
      GetPlayerStats: (FDashInitSpeed)
      SetSpeedX: Mem(StoredRegister)
      EnableInertia: 0
      EnableFlip: 0
      EndIf: 
    EndBlock: 
  OnUpdate: 
    If: Mem(DefaultCommonAction)
      GetPlayerStats: (FDashAccel)
      AddSpeedX: Mem(StoredRegister)
      GetPlayerStats: (FDashFriction)
      ModifyInternalValueAndSave: (Div), Mem(SpeedX), Mem(StoredRegister), Mem(StoredRegister)
      ModifyInternalValue: (Sub), Mem(SpeedX), Mem(StoredRegister)
      SetInertia: Mem(SpeedX)
      GetPlayerStats: (FDashMaxSpeed)
      IfOperation: (IsGreater), Mem(SpeedX), Mem(StoredRegister)
        GetPlayerStats: (FDashMaxSpeed)
        SetSpeedX: Mem(StoredRegister)
        EndIf: 
      ModifyInternalValueAndSave: (Mod), Mem(ActionTime), Val(9), Mem(StoredRegister)
      IfOperation: (IsEqual), Mem(StoredRegister), Val(6)
        CreateParticle: s64'cmn_dashsmoke', (Self), 0, 0, 0
        EndIf: 
      IfOperation: (IsGreater), Mem(ActionTime), Val(12)
        CheckInputRaw: (InputRight)
        IfNot: Mem(StoredRegister)
          CheckInputRaw: (InputUp)
          IfNot: Mem(StoredRegister)
            JumpToState: s64'ForwardDashStop'
            EndIf: 
          EndIf: 
        EndIf: 
      EndIf: 
    EndBlock: 
  OnExit: 
    EnableInertia: 1
    IfNot: Mem(IsStunned)
      SetSpeedX: Val(0)
      EnableFlip: 1
      EnableAll: 
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'ForwardDashStop'
  OnEnter: 
    SetSpeedX: Val(0)
    DisableAll: 
    EnableState: (Jumping)
    CallSubroutine: s64'CmnEnableAttacks'
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      DisableState: (Jumping)
      EndIf: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(12)
      EnableAll: 
      DisableState: (Standing)
      EndIf: 
    EndBlock: 
  OnExit: 
    EnableAll: 
    EnableFlip: 1
    EndBlock: 
  EndState: 

BeginState: s64'Stand2Crouch'
  OnEnter: 
    EnableState: (Block)
    EndBlock: 
  OnUpdate: 
    CheckInputRaw: (InputDown)
    IfNot: Mem(StoredRegister)
      JumpToState: s64'Crouch2Stand'
      EndIf: 
    EndBlock: 
  OnExit: 
    DisableState: (Block)
    EndBlock: 
  EndState: 

BeginState: s64'Crouch'
  OnEnter: 
    EnableState: (Block)
    EndBlock: 
  OnUpdate: 
    CheckInputRaw: (InputDown)
    IfNot: Mem(StoredRegister)
      JumpToState: s64'Crouch2Stand'
      EndIf: 
    EndBlock: 
  OnExit: 
    DisableState: (Block)
    EndBlock: 
  EndState: 

BeginState: s64'CrouchFlip'
  OnEnter: 
    EnableState: (Block)
    EndBlock: 
  OnUpdate: 
    CheckInputRaw: (InputDown)
    IfNot: Mem(StoredRegister)
      JumpToState: s64'Crouch2Stand'
      EndIf: 
    EndBlock: 
  OnExit: 
    DisableState: (Block)
    EndBlock: 
  EndState: 

BeginState: s64'Crouch2Stand'
  OnEnter: 
    EnableState: (Crouching)
    DisableState: (Standing)
    EndBlock: 
  OnExit: 
    EnableState: (Standing)
    EndBlock: 
  EndState: 

BeginState: s64'VJump'
  OnEnter: 
    DisableAll: 
    EnableFlip: 0
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsGreater), Mem(PosY), Val(0)
      EnableAll: 
      EndIf: 
    Else: 
      IfOperation: (IsEqual), Mem(ActionTime), Val(4)
        GetPlayerStats: (JumpHeight)
        SetSpeedY: Mem(StoredRegister)
        SetSpeedX: Val(0)
        GetPlayerStats: (JumpGravity)
        SetGravity: Mem(StoredRegister)
        CreateParticle: s64'cmn_jumpsmoke', (Self), 0, 0, 0
        EndIf: 
      EndElse: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      EnableAll: 
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'BJump'
  OnEnter: 
    DisableAll: 
    EnableFlip: 0
    ClearInertia: 
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsGreater), Mem(PosY), Val(0)
      EnableAll: 
      EndIf: 
    Else: 
      IfOperation: (IsEqual), Mem(ActionTime), Val(4)
        GetPlayerStats: (JumpHeight)
        SetSpeedY: Mem(StoredRegister)
        GetPlayerStats: (BJumpSpeed)
        SetSpeedX: Mem(StoredRegister)
        GetPlayerStats: (JumpGravity)
        SetGravity: Mem(StoredRegister)
        CreateParticle: s64'cmn_jumpsmoke', (Self), 0, 0, 0
        EndIf: 
      EndElse: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      EnableAll: 
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'FJump'
  OnEnter: 
    DisableAll: 
    EnableFlip: 0
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsGreater), Mem(PosY), Val(0)
      EnableAll: 
      EndIf: 
    Else: 
      IfOperation: (IsEqual), Mem(ActionTime), Val(4)
        GetPlayerStats: (JumpHeight)
        SetSpeedY: Mem(StoredRegister)
        GetPlayerStats: (FJumpSpeed)
        SetSpeedX: Mem(StoredRegister)
        GetPlayerStats: (JumpGravity)
        SetGravity: Mem(StoredRegister)
        CreateParticle: s64'cmn_jumpsmoke', (Self), 0, 0, 0
        EndIf: 
      EndElse: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      EnableAll: 
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'VSuperJump'
  OnEnter: 
    DisableAll: 
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsGreater), Mem(PosY), Val(0)
      EnableAll: 
      EndIf: 
    Else: 
      IfOperation: (IsEqual), Mem(ActionTime), Val(4)
        GetPlayerStats: (SuperJumpHeight)
        SetSpeedY: Mem(StoredRegister)
        SetSpeedX: Val(0)
        GetPlayerStats: (SuperJumpGravity)
        SetGravity: Mem(StoredRegister)
        CreateParticle: s64'cmn_jumpsmoke', (Self), 0, 0, 0
        CreateParticle: s64'cmn_doublejump', (Self), 0, 0, 0
        EndIf: 
      EndElse: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      EnableAll: 
      EndIf: 
    EndBlock: 
  OnExit: 
    EnableFlip: 0
    EndBlock: 
  EndState: 

BeginState: s64'BSuperJump'
  OnEnter: 
    DisableAll: 
    ClearInertia: 
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsGreater), Mem(PosY), Val(0)
      EnableAll: 
      EndIf: 
    Else: 
      IfOperation: (IsEqual), Mem(ActionTime), Val(4)
        GetPlayerStats: (SuperJumpHeight)
        SetSpeedY: Mem(StoredRegister)
        GetPlayerStats: (BSuperJumpSpeed)
        SetSpeedX: Mem(StoredRegister)
        GetPlayerStats: (SuperJumpGravity)
        SetGravity: Mem(StoredRegister)
        CreateParticle: s64'cmn_jumpsmoke', (Self), 0, 0, 0
        CreateParticle: s64'cmn_doublejump', (Self), 0, 0, 0
        EndIf: 
      EndElse: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      EnableAll: 
      EndIf: 
    EndBlock: 
  OnExit: 
    EnableFlip: 0
    EndBlock: 
  EndState: 

BeginState: s64'FSuperJump'
  OnEnter: 
    DisableAll: 
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsGreater), Mem(PosY), Val(0)
      EnableAll: 
      EndIf: 
    Else: 
      IfOperation: (IsEqual), Mem(ActionTime), Val(4)
        GetPlayerStats: (SuperJumpHeight)
        SetSpeedY: Mem(StoredRegister)
        GetPlayerStats: (FSuperJumpSpeed)
        SetSpeedX: Mem(StoredRegister)
        GetPlayerStats: (SuperJumpGravity)
        SetGravity: Mem(StoredRegister)
        CreateParticle: s64'cmn_jumpsmoke', (Self), 0, 0, 0
        CreateParticle: s64'cmn_doublejump', (Self), 0, 0, 0
        EndIf: 
      EndElse: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(5)
      EnableAll: 
      EndIf: 
    EndBlock: 
  OnExit: 
    EnableFlip: 0
    EndBlock: 
  EndState: 

BeginState: s64'BackAirDash'
  OnEnter: 
    AddAirDash: -1
    AddAirJump: -1
    EnableFlip: 0
    ClearInertia: 
    If: Mem(DefaultCommonAction)
      SetAirDashTimer: 0
      SetAirDashNoAttackTimer: 0
      CreateParticle: s64'cmn_airbdash', (Self), 0, 0, 0
      EndIf: 
    EndBlock: 
  OnUpdate: 
    If: Mem(DefaultCommonAction)
      SetSpeedY: Val(0)
      GetPlayerStats: (BAirDashSpeed)
      SetSpeedX: Mem(StoredRegister)
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'ForwardAirDash'
  OnEnter: 
    AddAirDash: -1
    AddAirJump: -1
    EnableFlip: 0
    ClearInertia: 
    If: Mem(DefaultCommonAction)
      SetAirDashTimer: 1
      SetAirDashNoAttackTimer: 1
      CreateParticle: s64'cmn_airfdash', (Self), 0, 0, 0
      EndIf: 
    EndBlock: 
  OnUpdate: 
    If: Mem(DefaultCommonAction)
      SetSpeedY: Val(0)
      GetPlayerStats: (FAirDashSpeed)
      SetSpeedX: Mem(StoredRegister)
      EndIf: 
    EndBlock: 
  EndState: 

BeginState: s64'JumpFlip'
  OnEnter: 
    DisableAll: 
    EnableFlip: 0
    EndBlock: 
  OnUpdate: 
    EnableAll: 
    EndBlock: 
  EndState: 

BeginState: s64'JumpLanding'
  OnEnter: 
    DisableAll: 
    HaltMomentum: 
    ClearInertia: 
    EnableFlip: 1
    EndBlock: 
  OnUpdate: 
    IfOperation: (IsEqual), Mem(ActionTime), Val(6)
      EnableAll: 
      DisableState: (Standing)
      EndIf: 
    EndBlock: 
  OnExit: 
    EnableState: (Standing)
    EndBlock: 
  EndState: 

BeginState: s64'VAirJump'
  OnEnter: 
    AddAirJump: -1
    AddAirDash: -1
    EnableFlip: 0
    EnableAll: 
    GetPlayerStats: (JumpHeight)
    SetSpeedY: Mem(StoredRegister)
    SetSpeedX: Val(0)
    GetPlayerStats: (JumpGravity)
    SetGravity: Mem(StoredRegister)
    CreateParticle: s64'cmn_doublejump', (Self), 0, 0, 0
    EndBlock: 
  EndState: 

BeginState: s64'BAirJump'
  OnEnter: 
    ClearInertia: 
    AddAirJump: -1
    AddAirDash: -1
    EnableFlip: 0
    EnableAll: 
    GetPlayerStats: (JumpHeight)
    SetSpeedY: Mem(StoredRegister)
    GetPlayerStats: (BJumpSpeed)
    SetSpeedX: Mem(StoredRegister)
    GetPlayerStats: (JumpGravity)
    SetGravity: Mem(StoredRegister)
    CreateParticle: s64'cmn_doublejump', (Self), 0, 0, 0
    EndBlock: 
  EndState: 

BeginState: s64'FAirJump'
  OnEnter: 
    AddAirJump: -1
    AddAirDash: -1
    EnableFlip: 0
    EnableAll: 
    GetPlayerStats: (JumpHeight)
    SetSpeedY: Mem(StoredRegister)
    GetPlayerStats: (FJumpSpeed)
    SetSpeedX: Mem(StoredRegister)
    GetPlayerStats: (JumpGravity)
    SetGravity: Mem(StoredRegister)
    CreateParticle: s64'cmn_doublejump', (Self), 0, 0, 0
    EndBlock: 
  EndState: 

BeginState: s64'Hitstun'
  OnEnter: 
    DisableAll: 
    SetDefaultLandingAction: 0
    EnableFlip: 0
    EndBlock: 
  OnExit: 
    EnableFlip: 1
    EndBlock: 
  EndState: 

BeginState: s64'NormalAttack'
  OnEnter: 
    DisableAll: 
    EnableSpecialCancel: 1
    EnableSuperCancel: 1
    SetAttacking: 1
    EnableFlip: 0
    EndBlock: 
  OnExit: 
    EnableAll: 
    SetAttacking: 0
    EnableHit: 0
    EndBlock: 
  EndState: 